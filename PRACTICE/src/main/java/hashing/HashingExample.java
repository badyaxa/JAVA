package hashing;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Formatter;
/*
Хешування — це метод перетворення вхідних даних (наприклад, рядка, об'єкта чи числа) в унікальне значення фіксованої довжини, яке називається хешем. Це значення генерується за допомогою спеціальних математичних алгоритмів, відомих як хеш-функції. Хеш-функції широко використовуються в комп'ютерних науках для зберігання, пошуку та забезпечення цілісності даних.

Основні особливості хеш-функцій
Детермінованість: однаковий вхід завжди призводить до однакового хеш-значення.
Висока швидкість: хеш-функції працюють швидко, що робить їх ідеальними для великих обсягів даних.
Фіксована довжина вихідного значення: незалежно від розміру вхідних даних, хеш завжди має сталу довжину.
Односторонність: з хешу неможливо відновити вихідні дані. Це особливо важливо для захисту даних.
Мінімізація колізій: хороша хеш-функція намагається мінімізувати кількість колізій (ситуацій, коли різні вхідні значення мають однакове хеш-значення).
Застосування хешування
Структури даних (хеш-таблиці): використовуються для швидкого пошуку, вставки і видалення даних.
Шифрування паролів: паролі часто зберігаються в зашифрованому вигляді в базах даних як хеші, щоб навіть у разі витоку паролі не були доступні в явному вигляді.
Цілісність даних: хеші допомагають перевіряти цілісність файлів та повідомлень, щоб впевнитися, що дані не були змінені.
Алгоритми контролю версій: хеші використовуються в системах контролю версій (наприклад, Git) для ідентифікації версій файлів.
Криптовалюти: хешування є основою для механізмів блокчейну та криптовалют, наприклад, для створення "блоків".
Види хеш-функцій
MD5 (Message Digest 5): генерує 128-бітний хеш. Більше не вважається безпечним, оскільки можна знайти колізії.
SHA (Secure Hash Algorithm):
SHA-1: генерує 160-бітний хеш, але вразливий до атак.
SHA-2: надійніший варіант, включає SHA-256, SHA-512 тощо.
SHA-3: сучасний стандарт, стійкий до багатьох атак.
CRC (Cyclic Redundancy Check): використовується для виявлення помилок при передачі даних.
Криптографічні функції хешування (Bcrypt, Argon2): стійкі до атак і створені для захисту паролів.
Приклад хешування в Java
Нижче наведено приклад використання SHA-256 для хешування рядка.
*/
public class HashingExample {

    public static String hashWithSHA256(String text) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = digest.digest(text.getBytes());

            // Перетворюємо байти в рядок
            StringBuilder hashString = new StringBuilder();
            for (byte b : hashBytes) {
                hashString.append(String.format("%02x", b));
            }
            return hashString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error initializing SHA-256", e);
        }
    }

    public static void main(String[] args) {
        String text = "Hello, World!";
        String hash = hashWithSHA256(text);
        System.out.println("Hash: " + hash);
    }
}

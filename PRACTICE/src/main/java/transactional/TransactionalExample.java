package transactional;

import org.springframework.transaction.annotation.Isolation;

/*
Рівень ізоляції Serializable — це найвищий рівень ізоляції в системах управління базами даних (СУБД). Він гарантує, що транзакції виконуються так, ніби вони працюють послідовно, одна за одною, і жодна з них не взаємодіє з іншою. Такий рівень ізоляції дозволяє уникнути всіх видів проблем із паралельним виконанням транзакцій, але може призвести до значного зниження продуктивності через блокування ресурсів.

Що забезпечує рівень ізоляції Serializable?
Serializable запобігає наступним аномаліям:

Dirty Reads (Брудне читання) — коли одна транзакція читає дані, змінені іншою транзакцією, яка ще не завершилася.
Non-repeatable Reads (Неповторюване читання) — коли дані, прочитані транзакцією, змінюються іншою транзакцією до того, як перша транзакція завершиться.
Phantom Reads (Фантомні читання) — коли під час виконання транзакції з'являються або зникають нові рядки, що відповідають умовам запиту.
Усі ці проблеми усуваються за допомогою повного блокування відповідних даних у режимі Serializable.

Як працює рівень Serializable?
На рівні Serializable СУБД забезпечує послідовне виконання транзакцій за допомогою блокувань або мультиверсійної ізоляції (MVCC). Суть у тому, що кожна транзакція бачить тільки ті дані, які були зафіксовані на момент її початку, а нові зміни не видимі, поки транзакція не завершиться.

Основні особливості Serializable:
Повне блокування: Ресурси, які використовує транзакція, блокуються, що унеможливлює іншим транзакціям отримання доступу до тих же ресурсів до завершення першої транзакції.
Імітація послідовності: Система імітує виконання транзакцій у певному порядку, навіть якщо вони запущені одночасно.
Продуктивність: Використання цього рівня ізоляції може сильно знизити продуктивність, особливо в багатокористувацьких системах, оскільки багато транзакцій можуть бути заблоковані.
Приклад використання Serializable:
Припустимо, два користувачі одночасно намагаються купити один і той самий товар, і кількість товару обмежена. Якщо обидві транзакції працюють з базою даних на рівні ізоляції Serializable, друга транзакція буде заблокована, доки перша не завершиться, що гарантує, що не буде продано більше товарів, ніж є в наявності.

Код на Java з використанням Serializable:
У Java рівень ізоляції Serializable можна встановити для транзакцій з базою даних через JDBC або Spring:
        Connection conn = dataSource.getConnection();
        conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
*/


public class TransactionalExample {

    /*
    В Spring, коли ви використовуєте анотацію @Transactional, властивість isolation визначає рівень ізоляції транзакції. Коли ви встановлюєте Isolation.DEFAULT, це означає, що рівень ізоляції буде використовуватися за замовчуванням, який встановлений у вашій базі даних (СУБД).

    Що таке Isolation.DEFAULT?
    Isolation.DEFAULT — це значення, яке Spring використовує для позначення "рівня ізоляції за замовчуванням".
    В Isolation.DEFAULT немає заздалегідь визначеного рівня ізоляції, як, наприклад, у Isolation.READ_COMMITTED або Isolation.SERIALIZABLE.
    Це лише інструкція для Spring взяти рівень ізоляції, який визначений у конфігурації бази даних (MySQL, PostgreSQL, Oracle тощо).
    Коли використовується Isolation.DEFAULT?
    Коли isolation встановлено як DEFAULT, Spring передає управління ізоляцією транзакції базі даних.
    Це підходить у випадках, коли конкретний рівень ізоляції не потрібен, і вас влаштовує той, який встановлений у СУБД.
    Приклад коду з Isolation.DEFAULT
    */
    @org.springframework.transaction.annotation.Transactional // isolation = Isolation.DEFAULT
    public void processOrder() {
        // Транзакційний код для обробки замовлення
    }




    @org.springframework.transaction.annotation.Transactional(isolation = Isolation.SERIALIZABLE)
    public void updateStock() {
        // Операції з базою даних
        /*
        Переваги та недоліки рівня Serializable:
            Переваги:
                Максимальний рівень захисту від паралельних аномалій.
                Гарантія цілісності даних навіть у складних сценаріях.
            Недоліки:
                Продуктивність: Блокування можуть значно сповільнити роботу системи, особливо при великій кількості одночасних запитів.
                Збільшення часу очікування: Транзакції можуть чекати дуже довго на завершення інших транзакцій.
                Висновок: Рівень ізоляції Serializable підходить для критично важливих операцій, де цілісність даних має вищий пріоритет, ніж швидкість.
        */
    }
}
